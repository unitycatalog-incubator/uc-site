---
import "@pagefind/default-ui/css/ui.css";
import Icons from "./Icons.astro";
---

<div
  class="relative mx-auto flex w-full max-w-4xl items-center justify-around px-4 py-[0.25em]"
>
  <div class="relative w-full max-w-2xl">
    <button
      class="search-button flex items-center justify-around"
      id="search-button"
    >
      <Icons
        icon="search"
        alt="Search"
        className="lg:mr-sm lg:h-[1.25em] lg:w-[1.25em]"
      />
      <div class="hidden lg:block">Search</div>
      <kbd
        class="ml-auto hidden rounded bg-[#132538] px-[0.5em] py-[0.25em] text-xs lg:block"
        data-pagefind-ignore
      >
        <kbd>ctrl</kbd>
        <kbd>K</kbd>
      </kbd>
    </button>

    <!-- Search Dropdown -->
    <div
      id="search-dropdown"
      class="search-dropdown absolute top-full z-50 hidden max-h-96 overflow-y-auto rounded-lg border border-neutral-800 bg-neutral-900 p-4 text-white shadow-lg"
      style="width: 100%; min-width: 100%;"
    >
      {
        import.meta.env.DEV ? (
          <div class="text-center">
            <p>To view search results, run a production build:</p>
            <p>
              <code class="bg-darkBorder px-sm py-xs ml-sm rounded text-white">
                $ pnpm build && pnpm preview
              </code>
            </p>
          </div>
        ) : (
          <div id="pagefind-ui" />
        )
      }
    </div>
  </div>
</div>

<script>
  // Simple search functionality
  const searchButton = document.getElementById("search-button");
  const searchDropdown = document.getElementById("search-dropdown");

  if (searchButton && searchDropdown) {
    // Toggle dropdown on button click
    searchButton.addEventListener("click", () => {
      const isHidden = searchDropdown.classList.contains("hidden");
      if (isHidden) {
        searchDropdown.classList.remove("hidden");
      } else {
        searchDropdown.classList.add("hidden");
      }
    });

    // Keyboard shortcut (Ctrl+K or Cmd+K)
    document.addEventListener("keydown", (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === "k") {
        e.preventDefault();
        const isHidden = searchDropdown.classList.contains("hidden");
        if (isHidden) {
          searchDropdown.classList.remove("hidden");
        } else {
          searchDropdown.classList.add("hidden");
        }
      }
    });

    // Close dropdown on escape
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchDropdown.classList.contains("hidden")) {
        searchDropdown.classList.add("hidden");
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      const target = e.target as Node;
      if (!searchButton.contains(target) && !searchDropdown.contains(target)) {
        searchDropdown.classList.add("hidden");
      }
    });

    // Update keyboard shortcut display for Mac
    const shortcut = searchButton.querySelector("kbd");
    if (shortcut && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)) {
      const platformKey = shortcut.querySelector("kbd");
      if (platformKey) {
        platformKey.textContent = "âŒ˜";
      }
    }
  }

  // Initialize Pagefind UI
  if (typeof window !== "undefined" && !import.meta.env.DEV) {
    const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
    onIdle(async () => {
      try {
        const { PagefindUI } = await import("@pagefind/default-ui");
        new PagefindUI({
          element: "#pagefind-ui",
          baseUrl: "/",
          bundlePath: "/pagefind/",
          showImages: false,
          processResult: (result) => {
            // Only show results from blog pages
            if (result.url && result.url.includes("/blogs/")) {
              // Clean up the URL to ensure it works
              let cleanUrl = result.url;

              // Remove any .html extensions
              cleanUrl = cleanUrl.replace(/\.html$/, "");

              // Handle URLs with spaces (encode them properly)
              cleanUrl = cleanUrl.replace(/\s+/g, "%20");

              // Make sure the URL ends with a slash for blog posts
              if (!cleanUrl.endsWith("/")) {
                cleanUrl = cleanUrl + "/";
              }

              // Update the result URL
              result.url = cleanUrl;

              // Debug: log the URL to see what's happening
              console.log("Search result URL:", result.url);

              return result;
            }
            // Return null to hide non-blog results
            return null;
          },
        });
      } catch (error) {
        console.warn("Pagefind UI could not be loaded:", error);
      }
    });
  }
</script>

<style>
  .search-button {
    background: var(--color-neutral-900);
    border: 1px solid var(--color-neutral-800);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--color-neutral-50);
    cursor: pointer;
    transition: all 0.2s;
    width: 100%;
  }

  .search-button:hover {
    background: var(--color-neutral-800);
    border-color: var(--color-neutral-50);
  }

  .search-dropdown {
    background: var(--color-neutral-900);
    max-width: 800px;
    max-height: 600px;
    width: 100%;
    min-width: 100%;
    margin-top: 4px;
    box-shadow:
      0 10px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .search-dropdown:not(.hidden) {
    display: block !important;
  }

  kbd {
    font-family: theme(fontFamily.sans) !important;
  }
</style>

<style is:global>
  /*
   * Pagefind UI - Global
   */
  #pagefind-ui .pagefind-ui {
    color: inherit;
  }

  /*
   * Pagefind UI - Search
   */

  #pagefind-ui .pagefind-ui__search-input {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    outline: none;
  }
  #pagefind-ui .pagefind-ui__form::before {
    background-color: rgba(255, 255, 255, 0.75);
  }
  #pagefind-ui .pagefind-ui__search-input:focus {
    background-color: rgba(255, 255, 255, 0.125);
    border: 1px solid white;
    outline: 1px solid #3b82f6;
    outline-offset: -2px;
  }
  #pagefind-ui .pagefind-ui__search-input:focus::before {
    background-color: white !important;
  }
  #pagefind-ui .pagefind-ui__search-input::placeholder {
    opacity: 1;
    color: rgba(255, 255, 255, 0.75);
  }
  #pagefind-ui .pagefind-ui__search-clear {
    display: none;
  }

  /*
   * Pagefind UI - Results
   */
  #pagefind-ui .pagefind-ui__message {
    font-size: 16px;
    color: rgba(255, 255, 255, 0.75);
  }
  #pagefind-ui .pagefind-ui__result {
    border: none;
    background-color: #2c4b69;
    padding: 16px;
    border-radius: 8px;
  }
  #pagefind-ui .pagefind-ui__result + .pagefind-ui__result {
    margin-top: 8px;
  }
  #pagefind-ui .pagefind-ui__result-inner {
    margin-top: 0;
  }
  #pagefind-ui .pagefind-ui__result-title {
    font-size: 16px;
  }
  #pagefind-ui .pagefind-ui__result-title .pagefind-ui__result-link {
    color: rgba(255, 255, 255, 0.75);
  }
  #pagefind-ui .pagefind-ui__result-excerpt {
    color: rgba(255, 255, 255, 0.75);
    font-size: 16px;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
    contain: content;
    will-change: transform;
    max-height: 3em;
  }
  #pagefind-ui .pagefind-ui__result mark {
    background-color: transparent;
    color: white;
    font-weight: 600;
  }
  #pagefind-ui .pagefind-ui__result-nested {
    width: 100%;
    margin-top: 8px;
    padding-top: 8px;
    border-top: 1px solid rgba(255, 255, 255, 0.25);
  }
  #pagefind-ui .pagefind-ui__button {
    background-color: transparent;
    color: inherit;
  }
  #pagefind-ui .pagefind-ui__button:hover,
  #pagefind-ui .pagefind-ui__button:focus {
    border-color: white;
  }

  #pagefind-ui {
    max-height: calc(80vh - 16px * 2);
    overflow-y: auto;
  }

  #pagefind-ui .pagefind-ui__results {
    overflow: visible;
    position: static;
  }
</style>
