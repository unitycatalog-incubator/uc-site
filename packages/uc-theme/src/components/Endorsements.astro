---
import { Image } from "astro:assets";
import type { Endorsement } from "../types";
interface Props {
  pageTitle: string;
  endorsements: Endorsement[];
}
const { pageTitle, endorsements } = Astro.props;
---

<section class="endorsements-section" id="endorsements-section">
  <h2 class="endorsements-title feature-animate">{pageTitle}</h2>
  <div class="endorsements-grid" id="endorsements-grid">
    {
      endorsements.map((card, i) => (
        <div
          class="endorsement-card"
          data-index={i}
          style={i < 3 ? "" : "display:none;"}
        >
          {card.icon ? (
            <div class="endorsement-icon-container">
              <Image
                src={card.icon}
                alt={card.name + " logo"}
                class="endorsement-icon"
                width={50}
                height={50}
                loading="lazy"
              />
            </div>
          ) : (
            <div class="endorsement-icon-placeholder" />
          )}
          <p class="endorsement-quote">"{card.testimonial}"</p>
          <div class="endorsement-meta">
            <div class="endorsement-name">{card.name}</div>
            <div class="endorsement-title">{card.title}</div>
          </div>
        </div>
      ))
    }
  </div>
  <div class="endorsements-pagination">
    <button id="endorsements-prev" aria-label="Previous">
      <Image
        src="/icons/arrow-left.svg"
        alt="Previous"
        width={24}
        height={24}
        loading="lazy"
      />
    </button>
    <button id="endorsements-next" aria-label="Next">
      <Image
        src="/icons/arrow-right.svg"
        alt="Next"
        width={24}
        height={24}
        loading="lazy"
      />
    </button>
  </div>
  <style>
    .endorsements-section {
      background: var(--color-neutral-950);
      padding: 7rem 2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .endorsements-title {
      text-align: center;
      font-size: 2.2rem;
      font-weight: 700;
      color: var(--color-neutral-0);
      margin-bottom: 3rem;
      max-width: 500px;
    }
    .endorsements-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      max-width: 1280px;
      margin: 0 auto;
      grid-auto-rows: 1fr;
    }
    .endorsement-card {
      background: var(--color-neutral-0);
      border-radius: 1.25rem;
      padding: 2rem;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      box-shadow: 0 4px 24px 0 #0002;
      min-height: 350px;
      position: relative;
      height: 700px;
    }
    .endorsement-icon-container {
      width: 8rem;
      height: 3.125rem;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: flex-start;
    }
    .endorsement-icon {
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 0.5rem;
    }
    .endorsement-quote {
      font-size: 1rem;
      color: var(--color-neutral-900);
      flex: 1;
      font-weight: 500;
      line-height: 1.75;
    }
    .endorsement-meta {
      margin-top: auto;
    }
    .endorsement-name {
      color: var(--color-neutral-900);
      margin-bottom: 0.25rem;
      font-size: 0.875rem;
      font-weight: 500;
    }
    .endorsement-title {
      color: var(--color-neutral-500);
      font-size: 0.875rem;
    }
    .endorsements-pagination {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin-top: 2rem;
      gap: 3rem;
    }
    .endorsements-pagination button {
      background: var(--color-neutral-950);
      border: 1.5px solid var(--color-primary-600);
      border-radius: 100%;
      width: 3.5rem;
      height: 3.5rem;
      font-size: 2rem;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      z-index: 1;
    }
    .endorsements-pagination button::before {
      content: "";
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: var(--conic-gradient);
      border-radius: 50%;
      z-index: -1;
      transition: opacity 0.3s ease-out;
      opacity: 0;
      animation: spin 4s linear infinite;
    }
    .endorsements-pagination button:hover::before {
      opacity: 1;
    }

    @keyframes spin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }

    @media (max-width: 900px) {
      .endorsements-section {
        max-height: none;
        padding: 3rem 1rem;
      }
      .endorsements-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      .endorsement-card {
        height: auto !important;
        min-height: 120px;
        padding: 1rem;
      }
    }

    @media (max-width: 768px) {
      .endorsements-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      .endorsement-card {
        gap: 2rem;
        padding: 30px;
        height: auto;
        min-height: 0;
      }
    }
    .feature-animate {
      opacity: 0;
      transform: translateY(80px);
      transition:
        opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
        transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    .feature-animate.visible {
      opacity: 1;
      transform: none;
    }
  </style>
  <script type="module" is:inline>
    let currentStart = 0;
    const cards = Array.from(document.querySelectorAll(".endorsement-card"));

    function getCardsPerPage() {
      return window.innerWidth <= 768 ? 1 : 3;
    }

    function getTotalPages() {
      const cardsPerPage = getCardsPerPage();
      return Math.max(0, cards.length - cardsPerPage);
    }

    function showWindow(start) {
      const cardsPerPage = getCardsPerPage();
      cards.forEach((card, i) => {
        card.style.display =
          i >= start && i < start + cardsPerPage ? "" : "none";
      });

      // Adjust heights after showing/hiding cards
      setTimeout(adjustMobileCardHeights, 50);
    }

    showWindow(currentStart);

    document.getElementById("endorsements-prev").onclick = () => {
      const totalPages = getTotalPages();
      if (currentStart === 0) {
        currentStart = totalPages; // Jump to last testimonial
      } else {
        currentStart = currentStart - 1;
      }
      showWindow(currentStart);
    };
    document.getElementById("endorsements-next").onclick = () => {
      const totalPages = getTotalPages();
      if (currentStart === totalPages) {
        currentStart = 0; // Jump to first testimonial
      } else {
        currentStart = currentStart + 1;
      }
      showWindow(currentStart);
    };

    window.addEventListener("resize", () => {
      const newCardsPerPage = getCardsPerPage();
      const currentCardsPerPage = window.innerWidth <= 768 ? 1 : 3;

      // Adjust currentStart if needed when switching between 1 and 3 cards
      if (newCardsPerPage !== currentCardsPerPage) {
        currentStart = Math.min(currentStart, getTotalPages());
      }

      showWindow(currentStart);
      adjustMobileCardHeights();
    });

    function adjustMobileCardHeights() {
      if (window.innerWidth <= 768) {
        // Reset heights to auto to get natural heights
        cards.forEach((card) => {
          card.style.height = "auto";
        });

        // Find the tallest card
        let maxHeight = 0;
        cards.forEach((card) => {
          if (card.style.display !== "none") {
            const cardHeight = card.offsetHeight;
            maxHeight = Math.max(maxHeight, cardHeight);
          }
        });

        // Set all visible cards to the same height
        cards.forEach((card) => {
          if (card.style.display !== "none") {
            card.style.height = maxHeight + "px";
          }
        });
      } else {
        // Reset to original heights for desktop
        cards.forEach((card) => {
          card.style.height = "";
        });
      }
    }

    // Initial height adjustment
    setTimeout(adjustMobileCardHeights, 100);
  </script>
  <script is:inline>
    window.addEventListener("DOMContentLoaded", function () {
      const featureTexts = document.querySelectorAll(".feature-animate");
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("visible");
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.2 },
      );
      featureTexts.forEach((el) => observer.observe(el));
    });
  </script>
</section>
