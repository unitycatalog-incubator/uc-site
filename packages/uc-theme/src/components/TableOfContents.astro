---
const { items } = Astro.props;

// Type aliases for TOC items
interface TocChild {
  label: string;
  href: string;
}
interface TocItem {
  label: string;
  href: string;
  children?: TocChild[];
}
---

<nav class="toc">
  <h3 class="toc-title">Table of Contents</h3>
  <ul>
    {
      (items as TocItem[]).map((item) => (
        <li>
          <span class="toc-icon">
            <svg
              width="1em"
              height="1em"
              viewBox="0 0 19 21"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M17.5 7.90193C19.5 9.05663 19.5 11.9434 17.5 13.0981L4.75 20.4593C2.75 21.614 0.25 20.1706 0.25 17.8612V3.13878C0.25 0.829379 2.75 -0.613993 4.75 0.540708L17.5 7.90193Z"
                fill="currentColor"
              />
            </svg>
          </span>
          <a href={item.href}>{item.label}</a>
          {item.children && (
            <ul>
              {item.children.map((child) => (
                <li>
                  <span class="toc-icon">
                    <svg
                      width="1em"
                      height="1em"
                      viewBox="0 0 19 21"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17.5 7.90193C19.5 9.05663 19.5 11.9434 17.5 13.0981L4.75 20.4593C2.75 21.614 0.25 20.1706 0.25 17.8612V3.13878C0.25 0.829379 2.75 -0.613993 4.75 0.540708L17.5 7.90193Z"
                        fill="currentColor"
                      />
                    </svg>
                  </span>
                  <a href={child.href}>{child.label}</a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const tocLinks = Array.from(document.querySelectorAll(".toc a"));
    const headings = tocLinks.map((link) =>
      document.querySelector(link.getAttribute("href")),
    );

    function onScroll() {
      let activeIndex = 0;
      for (let i = 0; i < headings.length; i++) {
        const rect = headings[i]?.getBoundingClientRect();
        if (rect && rect.top < window.innerHeight / 4) {
          activeIndex = i;
        }
      }
      tocLinks.forEach((link, i) => {
        if (i === activeIndex) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
    }

    window.addEventListener("scroll", onScroll, { passive: true });
    onScroll();
  });
</script>

<style>
  .toc {
    width: 430px;
    margin-bottom: 2.5rem;
    margin-top: 10rem;
    padding: 1rem 0 1rem 0;
    border-bottom: 1px solid var(--color-black-icon);
    border-top: 1px solid var(--color-black-icon);
  }
  .toc-title {
    font-size: 1.2rem;
    line-height: 24px;
    font-weight: 600;
    color: var(--color-accent-1000);
    padding-bottom: 1.5rem;
  }
  .toc ul {
    list-style: none;
    padding-left: 0;
  }
  .toc li {
    display: flex;
    align-items: center;
    gap: 0.5em;
    margin-bottom: 0.5rem;
    color: var(--color-black-icon);
  }
  .toc-icon {
    display: flex;
    align-items: center;
    color: var(--color-black-icon);
    font-size: 0.5em;
  }
  .toc a {
    color: var(--color-black-icon);
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.2s;
    padding: 0.15em 0.25em;
    border-radius: 0.25em;
  }
  .toc a:hover {
    color: var(--color-accent-1100);
    text-decoration: underline;
    background: none;
  }
  .toc ul ul {
    margin-left: 1.25rem;
    margin-top: 0.25rem;
  }
  .toc a.active {
    font-weight: bold;
    color: var(--color-accent-1100);
    border-radius: 0.25em;
  }
</style>
