---
// Type aliases for TOC items
interface TocChild {
  label: string;
  href: string;
}
interface TocItem {
  label: string;
  href: string;
  children?: TocChild[];
}

interface Props {
  items: TocItem[];
}

const { items } = Astro.props;

const iconClass =
  "text-[0.5rem] inline-block mr-1 transition-[margin-right] [.active_&]:mr-2";
const linkClass =
  "text-inherit text-xs no-underline transition-colors hover:text-accent-1100 [&.active]:bold [&.active]:text-accent-1100";
---

<nav class="toc">
  <h3 class="mb-4 font-semibold">Table of Contents</h3>
  <ul class="list-none text-black">
    {
      items.map((item) => (
        <li>
          <a href={item.href} class={linkClass}>
            <span class={iconClass}>▶</span>
            {item.label}
          </a>
          {item.children && (
            <ul class="ml-6 mt-1 list-none">
              {item.children.map((child) => (
                <li>
                  <a href={child.href} class={linkClass}>
                    <span class={iconClass}>▶</span>
                    {child.label}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>
<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const tocLinks = Array.from(document.querySelectorAll(".toc a"));
    const headings = tocLinks.map((link) =>
      document.querySelector(link.getAttribute("href")),
    );

    function onScroll() {
      let activeIndex = 0;
      for (let i = 0; i < headings.length; i++) {
        const rect = headings[i]?.getBoundingClientRect();
        if (rect && rect.top < window.innerHeight / 4) {
          activeIndex = i;
        }
      }
      tocLinks.forEach((link, i) => {
        if (i === activeIndex) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
    }

    window.addEventListener("scroll", onScroll, { passive: true });
    onScroll();
  });
</script>
