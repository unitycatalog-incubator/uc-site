---
import { getCollection } from "astro:content";
import { Search } from "uc-theme/components";
import FeaturedBlogCard from "../../components/pages/blog/FeaturedBlogCard.astro";
import BlogCard from "../../components/pages/blog/BlogCard.astro";
import Subscribe from "../../components/pages/blog/Subscribe.astro";
import Layout from "../../layouts/Layout.astro";

const posts = await getCollection("blog");
posts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
);
const featured = posts.find((post) => post.data.featured === true);
const rest = posts.filter((post) => post !== featured);
---

<Layout title="Blog">
  <div class="blog-hero">
    <div class="featured-hero-background">
      <div class="featured-hero-grid-bg"></div>
      <div class="featured-hero-bottom-gradient"></div>
      <div class="featured-hero-grain-bg"></div>
    </div>
    <h1>Blog</h1>
    <p>The first multimodal open catalog for data and AI</p>
  </div>
  {
    featured && (
      <section>
        <FeaturedBlogCard post={featured} />
      </section>
    )
  }
  <section id="blog-section">
    <div class="search-container">
      <Search />
    </div>
    <div id="blog-grid">
      {rest.map((post, i) => <BlogCard post={post} data-index={i} />)}
    </div>
    <div id="pagination"></div>
    <Subscribe />
  </section>
</Layout>
<style is:global>
  .blog-hero {
    text-align: center;
    margin-top: 12rem;
  }

  .featured-hero-background {
    position: absolute;
    inset: 0;
    z-index: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .featured-hero-grain-bg {
    z-index: 1;
    opacity: 0.08;
    mix-blend-mode: normal;
    background-image: url(/images/hero-star-background.png);
    background-repeat: repeat;
    position: absolute;
    inset: 0;
    bottom: 25rem;
  }

  .blog-hero h1 {
    font-size: 3.75rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 0.5rem;
    color: var(--color-neutral-0);
  }
  .blog-hero p {
    color: var(--color-neutral-0);
    margin-top: 2rem;
    font-size: 1.25rem;
  }
  #blog-grid {
    max-width: 1510px;
    margin-left: auto;
    margin-right: auto;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding-right: 5%;
    padding-left: 5%;
  }
  #pagination {
    display: flex;
    justify-content: center;
    margin-bottom: 10rem;
    gap: 1.5rem;
  }
  #pagination .pagination-link,
  #pagination .pagination-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    font-size: 1rem;
    border-radius: 0.25rem;
    background: var(--color-neutral-0);
    color: var(--color-black);
    border: 1.5px solid var(--color-neutral-200);
    cursor: pointer;
    text-decoration: none;
    font-weight: 400;
    transition:
      background 0.2s,
      color 0.2s,
      border 0.2s;
    padding: 0;
  }
  #pagination .pagination-link.active {
    background: var(--color-neutral-900);
    color: var(--color-neutral-0);
    border: none;
    font-weight: 600;
    pointer-events: none;
  }

  @media (max-width: 1024px) {
    #blog-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
      padding-right: 5%;
      padding-left: 5%;
    }
  }

  @media (max-width: 768px) {
    #blog-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 0 1rem;
    }
  }

  /* Search Styles */
  .search-container {
    margin-bottom: 4rem;
  }
</style>
<script type="module">
  const POSTS_PER_PAGE = 9;
  const posts = Array.from(document.querySelectorAll("#blog-grid > *"));
  const pagination = document.getElementById("pagination");
  let currentPage = 1;
  const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);

  function renderPage(page) {
    posts.forEach((el, i) => {
      el.style.display =
        i >= (page - 1) * POSTS_PER_PAGE && i < page * POSTS_PER_PAGE
          ? ""
          : "none";
    });
    pagination.innerHTML = "";

    // Previous arrow
    if (page > 1) {
      const prev = document.createElement("button");
      prev.type = "button";
      prev.innerHTML = "&larr;";
      prev.className = "pagination-arrow";
      prev.onclick = () => {
        currentPage = page - 1;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(prev);
    }

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.textContent = i;
      btn.type = "button";
      btn.className = "pagination-link" + (i === page ? " active" : "");
      btn.disabled = i === page;
      btn.onclick = () => {
        currentPage = i;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(btn);
    }

    // Next arrow
    if (page < totalPages) {
      const next = document.createElement("button");
      next.type = "button";
      next.innerHTML = "&rarr;";
      next.className = "pagination-arrow";
      next.onclick = () => {
        currentPage = page + 1;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(next);
    }
  }
  renderPage(currentPage);
</script>
