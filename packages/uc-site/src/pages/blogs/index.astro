---
import { getCollection } from "astro:content";
import { Search, Section } from "uc-theme/components";
import BlogCard from "../../components/pages/blog/BlogCard.astro";
import Subscribe from "../../components/pages/blog/Subscribe.astro";
import Layout from "../../layouts/Layout.astro";

const posts = await getCollection("blog");
posts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
);
const featured = posts.find((post) => post.data.featured === true);
const rest = posts.filter((post) => post !== featured);
---

<Layout title="Blog">
  {
    featured && (
      <Section padding="lg" variant="hero">
        <h1 slot="title">Blog</h1>
        <p slot="subtitle">The first multimodal open catalog for data and AI</p>
        <BlogCard post={featured} isFeatured className="relative z-1" />
      </Section>
    )
  }
  <div id="blog-section">
    <Section>
      <Search className="mb-16" />
      <div
        id="blog-grid"
        class="grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-6 lg:grid-cols-3"
      >
        {rest.map((post, i) => <BlogCard post={post} data-index={i} />)}
      </div>
      <div id="pagination"></div>
    </Section>
  </div>
</Layout>
<style is:global>
  #pagination {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
    gap: 1.5rem;
  }
  #pagination .pagination-link,
  #pagination .pagination-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    font-size: 1rem;
    border-radius: 0.25rem;
    background: var(--color-neutral-0);
    color: var(--color-black);
    border: 1.5px solid var(--color-neutral-200);
    cursor: pointer;
    text-decoration: none;
    font-weight: 400;
    transition:
      background 0.2s,
      color 0.2s,
      border 0.2s;
    padding: 0;
  }
  #pagination .pagination-link.active {
    background: var(--color-neutral-900);
    color: var(--color-neutral-0);
    border: none;
    font-weight: 600;
    pointer-events: none;
  }
</style>
<script type="module">
  const POSTS_PER_PAGE = 9;
  const posts = Array.from(document.querySelectorAll("#blog-grid > *"));
  const pagination = document.getElementById("pagination");
  let currentPage = 1;
  const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);

  function renderPage(page) {
    posts.forEach((el, i) => {
      el.style.display =
        i >= (page - 1) * POSTS_PER_PAGE && i < page * POSTS_PER_PAGE
          ? ""
          : "none";
    });
    pagination.innerHTML = "";

    // Previous arrow
    if (page > 1) {
      const prev = document.createElement("button");
      prev.type = "button";
      prev.innerHTML = "&larr;";
      prev.className = "pagination-arrow";
      prev.onclick = () => {
        currentPage = page - 1;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(prev);
    }

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.textContent = i;
      btn.type = "button";
      btn.className = "pagination-link" + (i === page ? " active" : "");
      btn.disabled = i === page;
      btn.onclick = () => {
        currentPage = i;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(btn);
    }

    // Next arrow
    if (page < totalPages) {
      const next = document.createElement("button");
      next.type = "button";
      next.innerHTML = "&rarr;";
      next.className = "pagination-arrow";
      next.onclick = () => {
        currentPage = page + 1;
        renderPage(currentPage);
        document
          .getElementById("blog-section")
          .scrollIntoView({ behavior: "smooth" });
      };
      pagination.appendChild(next);
    }
  }
  renderPage(currentPage);
</script>
